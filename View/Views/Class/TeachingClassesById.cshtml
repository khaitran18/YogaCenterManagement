@using View.Models.Enum
@using View.Models.Response;
@model View.Models.Response.ClassDto
@using Newtonsoft.Json
@{
    @addTagHelper "*, Microsoft.AspNetCore.Mvc.TagHelpers"
    ViewData["Title"] = "StudyingClasssesById";
    var changeClassList = ViewBag.ChangeClassList as List<ClassDto>;
    var listSchedule = ViewBag.ScheduleList as List<ScheduleDto>;
}

<partial name="_Notification" />
<!-- Img Section  -->
<div class="yg-img-section">
    <div class="row">
        <div class="col-md-12 col-sm-12"> <img src="@Model.Image" class="img-fluid animate-box" data-animate-effect="fadeInUp" alt=""> </div>
    </div>
</div>
<!-- Modal HTML -->
<div id="myModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal header -->
            <div class="modal-header">
                <h5 class="modal-title">Create notification</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <form id="myForm" onsubmit="submitForm(event)" asp-controller="Class" asp-action="CreateNotification" method="post">
                    <div class="form-group">
                        <label for="name">Your note:</label>
                        <input type="text" id="Content" name="Content" value="">
                        <input type="hidden" name="ScheduleId" id="ScheduleId" value="">
                        <input type="hidden" name="ClassId" id="ClassId" value="">
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Schedule Section -->
<div class="yg-schedule-section">
    <div class="container">
        <div class="row">
            <div class="col-md-12 col-sm-12">
                <div class="yg-details-block yg-text-center animate-box" data-animate-effect="fadeInUp">
                    <h3 class="yg-details-title">OUR SCHEDULE</h3>
                </div>
            </div>
        </div>
        <div class="row d-flex justify-content-between">
            <span class="pl-3">
                <a id="previousWeekLink" style="cursor: pointer;" href=""> < Previous week</a>
            </span>
            <span class="pr-3">
                <a id="nextWeekLink" style="cursor: pointer;" href="">Next week ></a>
            </span>
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12 animate-box" data-animate-effect="fadeInUp">
                <table class="table table-bordered">
                    <thead class="yg-thead">
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">MONDAY</th>
                            <th scope="col">TUESDAY</th>
                            <th scope="col">WEDNESDAY</th>
                            <th scope="col">THURSTDAY</th>
                            <th scope="col">FRIDAY</th>
                            <th scope="col">SATURDAY</th>
                            <th scope="col">SUNDAY</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row" class="yg-thead">Date</th>
                            @for (int i = 1; i <= 7; i++)
                            {
                                bool c = false;
                                @foreach (var item in listSchedule)
                                {
                                    if (item.Date.DayOfWeek == (DayOfWeek)i)
                                    {
                                        c = true;
                                        <td class="yg-schedule-full">@Model.ClassName<br />@item.Date.ToString("dd/MM") <br />@item.Slot.StartTime.ToString(@"hh\:mm") - @item.Slot.EndTime.ToString(@"hh\:mm")<br /></td>
                                    }
                                }
                                @if (!c)
                                {
                                    <td class="yg-schedule-empty">No Activities</td>
                                }
                            }
                        </tr>
                        <tr id="notificationRow">
                            <th scope="row" class="yg-thead">Notification</th>
                            @for (int i = 1; i <= 7; i++)
                            {
                                bool c = false;
                                @foreach (var item in listSchedule)
                                {
                                    if (item.Date.DayOfWeek == (DayOfWeek)i)
                                    {
                                        c = true;
                                        <td class="yg-schedule-empty schedule-notification" data-toggle="modal" data-target="#myModal" style="cursor: pointer;" onmouseover="this.style.backgroundColor='#f1f1f1';" onmouseout="this.style.backgroundColor='transparent';" data-item="@JsonConvert.SerializeObject(item)"><b>@item.DailyNote</b></td>
                                    }
                                }
                                @if (!c)
                                {
                                    <td class="yg-schedule-empty"></td>
                                }
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row ml-2">
            <div class="mr-auto" id="createNotification">(Click on empty box to create note)</div>
        </div>
    </div>
</div>

<!-- About The Class -->
<div class="yg-description-section">
    <div class="container">
        <div class="row">
            <div class="col-md-12 col-sm-12 animate-box" data-animate-effect="fadeInUp">
                <h1>About The Class</h1>
            </div>
            <div class="col-md-8 col-sm-12 animate-box" data-animate-effect="fadeInUp">
                <p>@Model.Description</p>
                <br />
                <!-- Trainer -->
                <div class="row">
                    <div class="col-md-4 col-sm-4">
                        <div class="yg-class-trainer"><img src="~/images/trainer/staff03.jpg" class="img-fluid" alt=""></div>
                    </div>
                    <div class="col-md-8 col-sm-8">
                        <div class="yg-class-trainer-content">
                            @if (Model.Lecturer != null)
                            {
                                <h3>
                                    <span>@Model.Lecturer.FullName</span> — <span>TRAINER</span>
                                </h3>
                            }
                            else
                            {
                                <h3>N/A — <span>LECTURER</span></h3>
                            }
                            <p>Proin ultricies nibh non dolor maximus sceleue. Integer molliser faubs neque nec tincidunte. Aliquam erat vol tempor malader. Aliquam erat volutpat. Praeser tempor maladi quam, nec rutre arcuornare sed. Duru egiter ligula at nibh viverra ultricies. Nunctionter ranish libero maximus aliquet.</p>
                            <span class="yg-social-icon ti-facebook"></span>
                            <span class="yg-social-icon ti-instagram"></span>
                            <span class="yg-social-icon ti-twitter"></span>
                        </div>
                    </div>
                </div>
                <div style="height:50px;"></div>

            </div>
            <!-- Class Details & Class Hours -->
            <div class="col-md-4 col-sm-12">
                <div class="yg-class-box animate-box" data-animate-effect="fadeInUp">
                    <h3>Class Details</h3>
                    <div class="yg-class-table">
                        <ul>
                            <li> <span class="yg-class-table-light-text"><i class="ti-tag"></i>Price</span> <span>@Model.Price.ToString("N0") VND</span> </li>
                            <li>
                                <span class="yg-class-table-light-text"><i class="ti-user"></i>Trainer</span>
                                @if (Model.Lecturer != null)
                                {
                                    <span>@Model.Lecturer.FullName</span>
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            </li>
                            <li> <span class="yg-class-table-light-text"><i class="ti-user"></i>Members</span> <span>@Model.ClassCapacity</span> </li>
                            <li> <span class="yg-class-table-light-text"><i class="ti-calendar"></i>Start Date</span> <span>@Model.StartDate.ToString("MMMM dd, yyyy")</span> </li>
                        </ul>
                    </div>
                </div>
                <div class="yg-class-box animate-box" data-animate-effect="fadeInUp">
                    <h3>Class Hours</h3>
                    <div class="yg-class-table">
                        <ul>
                            @if (Model.Schedules != null)
                            {
                                @foreach (var schedule in Model.Schedules)
                                {
                                    foreach (var day in schedule.Slot.Day)
                                    {
                                        <li>
                                            <span class="yg-class-table-light-text">@((Days)day.DayId)</span>
                                            <span>@schedule.Slot.StartTime.ToString("hh\\:mm") - @schedule.Slot.EndTime.ToString("hh\\:mm")</span>
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Testimonial Section -->
<div class="yg-testimonial-section-first">
    <div class="container yg-container-full">
        <div class="row yg-gutter-0">
            <div class="col-md-7 col-sm-12 animate-box" data-animate-effect="fadeInLeft">
                <div class=""> <img src="~/images/testimonial.jpg" class="img-fluid" alt=""> </div>
            </div>
            <div class="col-md-5 col-sm-12 animate-box" data-animate-effect="fadeInRight">
                <div class="yg-text-block yg-text-block-h700">
                    <div class="yg-text-block-center yg-text-block-w60">
                        <div class="yg-testimonial-section-first-title">"Great teacher, great environment, great energy. Awesome specials for new yogis."</div>
                        <div class="yg-testimonial-section-first-subtitle">— Lee Buoy</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts{
    <script>
        // Get the current URL
        var currentURL = window.location.href;

        // Extract the value of the 's' variable from the URL
        var urlParams = new URLSearchParams(currentURL);
        var sValue = urlParams.get('s');

        // Check if the 's' value is not present or not a number, default it to 0
        var s = isNaN(parseInt(sValue)) ? 0 : parseInt(sValue);

        // Reduce the 's' value by 1
        var reducedS = s - 1;

        // Update the URL for the 'Previous week' link with the reduced 's' value
        var previousWeekURL = currentURL;
        if (sValue) {
            previousWeekURL = previousWeekURL.replace('s=' + sValue, 's=' + reducedS);
        } else {
            previousWeekURL += previousWeekURL.includes('?') ? '&s=' + reducedS : '?s=' + reducedS;
        }
        document.getElementById('previousWeekLink').setAttribute('href', previousWeekURL);
    </script>
    <script>
        // Get the current URL
        var currentURL = window.location.href;

        // Extract the value of the 's' variable from the URL
        var urlParams = new URLSearchParams(currentURL);
        var sValue = urlParams.get('s');

        // Check if the 's' value is not present or not a number, default it to 0
        var s = isNaN(parseInt(sValue)) ? 0 : parseInt(sValue);

        // Increment the 's' value by 1
        var incrementedS = s + 1;

        // Update the URL for the 'Next week' link with the incremented 's' value
        var nextWeekURL = currentURL;
        if (sValue) {
            nextWeekURL = nextWeekURL.replace('s=' + sValue, 's=' + incrementedS);
        } else {
            nextWeekURL += nextWeekURL.includes('?') ? '&s=' + incrementedS : '?s=' + incrementedS;
        }
        document.getElementById('nextWeekLink').setAttribute('href', nextWeekURL);
    </script>
    <script>
        // Get all the elements with the class "myCell"
        var cells = document.querySelectorAll(".schedule-notification");
        // Get the reference to the modal
        var modal = document.getElementById("myModal");
        // Get the reference to the form within the modal
        var form = document.getElementById("myForm");
        // Get the reference to the cancel button
        var cancelButton = document.getElementById("cancelButton");
        var scheduleIdInput = document.getElementById("ScheduleId");
        var classId = document.getElementById("ClassId");
        var notiValue = document.getElementById("Content");
        // Add an event listener to each cell
        cells.forEach(function(cell) {
            cell.addEventListener("click", function() {
                // Display the modal when a cell is clicked
                modal.style.display = "block";
                var $row = $(this).closest('td');
                var item = $row.data('item');
                scheduleIdInput.value = item.Id;
                notiValue.value = item.DailyNote;
                classId.value = item.ClassId;
            });
        });

        // Close the modal when the close button or cancel button is clicked
        closeButton.addEventListener("click", closeModal);
        cancelButton.addEventListener("click", closeModal);

        // Function to close the modal
        var closeButton = document.getElementsByClassName("close")[0];
        closeButton.addEventListener("click", function() {
            modal.style.display = "none";
        });
        // Close the modal when the user clicks outside the modal content
        window.addEventListener("click", function(event) {
            if (event.target == modal) {
                closeModal();
            }
        });

        // Handle the form submission
        form.addEventListener("submit", function(event) {
            event.preventDefault();
            // Perform your desired actions here
            console.log("Form submitted!");
        });

    </script>
    }
